// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// Base NetRoute class.
SWIFT_CLASS("_TtC8NetRoute8NRObject")
@interface NRObject : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NRRequestParameters;
@class NRResponse;
@class NRRequestQueue;


/// Basic network request to work with HTTP method. The request can be put into a request queue. To sort the queue, every  request has a priority. It is recommended to use Default priority when request is executed withot any queue. Priority:
///
/// <ul><li><code>Low
/// </code>:        User-initiated not important request, that can not be done in background.</li><li><code>Default
/// </code>:    The standart user-initiated request.</li><li><code>High
/// </code>:       Important UI-request.</li><li><code>Backound
/// </code>:   The request is a background task.</li></ul>
SWIFT_CLASS("_TtC8NetRoute9NRRequest")
@interface NRRequest : NRObject

/// URL to the HTTP method.
@property (nonatomic, readonly, strong) NSURL * _Nonnull URL;

/// Parametes for the request.
@property (nonatomic, readonly, strong) NRRequestParameters * _Nullable parameters;

/// Response of the HTTP method.
@property (nonatomic, strong) NRResponse * _Nullable response;

/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Executes request.
///
/// \param completion Callback that is called after request returned response.
- (void)runWithCompletion:(void (^ _Nullable)(NRResponse * _Nonnull response))completion;

/// Passes the request to a given queue. Blocks the request from direct execution.
///
/// \param queue A queue to add the request.
- (void)passToQueue:(NRRequestQueue * _Nonnull)queue;
@end



/// Parameters for the request.
SWIFT_CLASS("_TtC8NetRoute19NRRequestParameters")
@interface NRRequestParameters : NRObject

/// Dictionary with parameters.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull parametersDictionary;

/// Custom string that can be appended to URL in .GET requests.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Initializes a new instancw from a given dictionary.
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
@end



/// Queue of requests.
SWIFT_CLASS("_TtC8NetRoute14NRRequestQueue")
@interface NRRequestQueue : NRObject

/// Descriprion for converting to string.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Adds a new request to the queue.\Warning 
///
/// This method should not be used to add requests. Use <code>passToQueue(queue: NRRequestQueue)
/// </code> of a request object.
///
/// \param request A request to add to the queue.
- (void)addRequest:(NRRequest * _Nonnull)request;

/// Runs all requests in the queue.
- (void)runRequests;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSURLResponse;
@class NSError;


/// The response of the request.
SWIFT_CLASS("_TtC8NetRoute10NRResponse")
@interface NRResponse : NRObject

/// Response data.
@property (nonatomic, readonly, strong) NSData * _Nullable data;

/// HTTP response.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;

/// Error.
@property (nonatomic, readonly, strong) NSError * _Nullable error;

/// Encoding for the string conversion. Default is NSUTF8StringEncoding.
@property (nonatomic) NSUInteger encoding;

/// String conversion.Returns nil if the data can not be presented as String.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// String value of the data. Returns nil if the data can not be presented as String.
@property (nonatomic, readonly, copy) NSString * _Nullable stringValue;

/// Dictionary of the data. Returns nil if the data can not be presented as Dictionary.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable dictionaryValue;

/// Initializes a new instance from default NSURLSession output.
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end



/// URL manager used to store the default url to the API.
SWIFT_CLASS("_TtC8NetRoute12NRURLManager")
@interface NRURLManager : NRObject

/// URL to store.
@property (nonatomic, strong) NSURL * _Nullable primaryURL;

/// Singleton.
+ (NRURLManager * _Nonnull)sharedManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
